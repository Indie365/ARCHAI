__include__: 'darts.yaml' # just use darts defaults


nas:
  eval:
    model_factory_spec: 'resnet18'

    #darts loader/trainer
    loader:
      train_batch: 128 #96
      cutout: 0
      naswotrain:
        train_batch: 128 # batch size for naswotrain score computation
      freeze_loader:
        train_batch: 2048 # batch size for freeze training
    trainer:
      plotsdir: ''
      aux_weight: 0.0
      grad_clip: 0.0
      drop_path_prob: 0.0 # probability that given edge will be dropped
      val_top1_acc_threshold: 0.10 # after some accuracy we will shift into training only the last 'n' layers
      train_regular: True # if False the full regular training of the architecture will be bypassed
      epochs: 200
      optimizer:
        type: 'sgd'
        lr: 0.0333 #0.025 # init learning rate
        decay: 3.0e-4 # pytorch default is 0.0
        momentum: 0.9 # pytorch default is 0.0
        nesterov: False # pytorch default is False
        warmup: null
      lr_schedule:
        type: 'cosine'
        min_lr: 0.001 # min learning rate to be set in eta_min param of scheduler
      
    freeze_trainer:
      plotsdir: ''
      identifiers_to_unfreeze: ['fc'] # last few layer names are architecture specific
      apex:
        _copy: '/common/apex'
      aux_weight: 0.0 # very important that this is 0.0 for freeze training
      drop_path_prob: 0.0 # very important that this is 0.0 for freeze training
      grad_clip: 5.0 # grads above this value is clipped
      l1_alphas: 0.0  # weight to be applied to sum(abs(alphas)) to loss term
      logger_freq: 1000 # after every N updates dump loss and other metrics in logger
      title: 'eval_train'
      epochs: 10
      batch_chunks: 1 # split batch into these many chunks and accumulate gradients so we can support GPUs with lower RAM
      lossfn:
        type: 'CrossEntropyLoss'
      optimizer:
        type: 'sgd'
        lr: 0.1 # init learning rate
        decay: 3.0e-4 # pytorch default is 0.0
        momentum: 0.9 # pytorch default is 0.0
        nesterov: False # pytorch default is False
        decay_bn: .NaN # if NaN then same as decay otherwise apply different decay to BN layers
      lr_schedule:
        type: 'cosine'
        min_lr: 0.001 # min learning rate to be set in eta_min param of scheduler
        warmup:  # increases LR for 0 to current in specified epochs and then hands over to main scheduler
          multiplier: 1
          epochs: 0 # 0 disables warmup
      validation:
        title: 'eval_test'
        batch_chunks: '_copy: ../../batch_chunks' # split batch into these many chunks and accumulate gradients so we can support GPUs with lower RAM
        logger_freq: 0
        freq: 1 # perform validation only every N epochs
        lossfn:
          type: 'CrossEntropyLoss'    
    