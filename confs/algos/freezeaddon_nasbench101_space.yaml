__include__: 'darts.yaml' # just use darts defaults


common:
  checkpoint:
    freq: -1 # essentially disable checkpointing to speedup download

nas:
  search:
    model_desc:
      num_edges_to_sample: 2 # number of edges each node will take input from

  eval:
    model_filename: False # disable model saving to speedup download 
    nasbench101:
      arch_index: 3636
    model_desc:
      num_edges_to_sample: 2
    loader:
      train_batch: 256 # 512 for V100? 256 for 2080Ti for local development
      aug: '' # in natsbench paper they use random flip and crop, we are doing lot more here
      naswotrain:
        train_batch: 256 # batch size for computing trainingless score
      freeze_loader:
        train_batch: 3072 # batch size for freeze training. 256 works with 5gb usage on 2080Ti.
    trainer:
      plotsdir: ''
      train_top1_acc_threshold: 0.1 # after some accuracy we will shift into training only the last 'n' layers
      apex:
        _copy: '/common/apex'
      aux_weight: '_copy: /nas/eval/model_desc/aux_weight'
      drop_path_prob: 0.0 # probability that given edge will be dropped
      grad_clip: 5.0 # grads above this value is clipped
      l1_alphas: 0.0   # weight to be applied to sum(abs(alphas)) to loss term
      logger_freq: 1000 # after every N updates dump loss and other metrics in logger
      title: 'eval_train'
      epochs: 108
      batch_chunks: 1 # split batch into these many chunks and accumulate gradients so we can support GPUs with lower RAM
      lossfn:
        type: 'CrossEntropyLoss'
      optimizer:
        type: 'sgd'
        lr: 0.2 # init learning rate
        decay: 1.0e-4 # pytorch default is 0.0
        momentum: 0.9 # pytorch default is 0.0
        nesterov: False # pytorch default is False
        decay_bn: .NaN # if NaN then same as decay otherwise apply different decay to BN layers
      lr_schedule:
        type: 'cosine'
        min_lr: 0.000 # min learning rate to be set in eta_min param of scheduler
        warmup:  # increases LR for 0 to current in specified epochs and then hands over to main scheduler
          multiplier: 1
          epochs: 0 # 0 disables warmup
  
    freeze_trainer:
      stack_num: 1
      plotsdir: ''
      apex:
        _copy: '/common/apex'
      aux_weight: 0.0 # very important that this is 0.0 for freeze training
      drop_path_prob: 0.0 # very important that this is 0.0 for freeze training
      grad_clip: 5.0 # grads above this value is clipped
      l1_alphas: 0.0  # weight to be applied to sum(abs(alphas)) to loss term
      logger_freq: 1000 # after every N updates dump loss and other metrics in logger
      title: 'eval_train'
      epochs: 5
      batch_chunks: 1 # split batch into these many chunks and accumulate gradients so we can support GPUs with lower RAM
      lossfn:
        type: 'CrossEntropyLoss'
      optimizer:
        type: 'sgd'
        lr: 0.025 # init learning rate
        decay: 0.0 # pytorch default is 0.0
        momentum: 0.9 # pytorch default is 0.0
        nesterov: False # pytorch default is False
        decay_bn: .NaN # if NaN then same as decay otherwise apply different decay to BN layers
      lr_schedule:
        type: 'cosine'
        min_lr: 0.001 # min learning rate to be set in eta_min param of scheduler
        warmup:  # increases LR for 0 to current in specified epochs and then hands over to main scheduler
          multiplier: 1
          epochs: 0 # 0 disables warmup
      validation:
        title: 'eval_test'
        batch_chunks: '_copy: ../../batch_chunks' # split batch into these many chunks and accumulate gradients so we can support GPUs with lower RAM
        logger_freq: 0
        freq: 1 # perform validation only every N epochs
        lossfn:
          type: 'CrossEntropyLoss'