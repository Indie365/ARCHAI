__include__: "../datasets/cifar10.yaml" # default dataset settings are for cifar

common:
  experiment_name: 'throwaway' # you should supply from command line
  experiment_desc: 'throwaway'
  logdir: '~/logdir'
  log_prefix: 'log' # prefix for log files that will becreated (log.log and log.yaml), no log files if ''
  log_level: 20 # logging.INFO
  backup_existing_log_file: False # should we overwrite existing log file without making a copy?
  yaml_log: True # if True, structured logs as yaml are also generated
  seed: 2.0
  tb_enable: False # if True then TensorBoard logging is enabled (may impact perf)
  tb_dir: '$expdir/tb' # path where tensorboard logs would be stored
  checkpoint:
    filename: '$expdir/checkpoint.pth'
    freq: 10

  # reddis address of Ray cluster. Use None for single node run
  # otherwise it should something like host:6379. Make sure to run on head node:
  # "ray start --head --redis-port=6379"
  redis: null
  apex: # this is overriden in search and eval individually
    enabled: False # global switch to disable everything apex
    distributed_enabled: True # enable/disable distributed mode
    mixed_prec_enabled: True # switch to disable amp mixed precision
    gpus: '' # use GPU IDs specified here (comma separated), if '' then use all GPUs
    opt_level: 'O2' # optimization level for mixed precision
    bn_fp32: True # keep BN in fp32
    loss_scale: "dynamic" # loss scaling mode for mixed prec, must be string reprenting floar ot "dynamic"
    sync_bn: False # should be replace BNs with sync BNs for distributed model
    scale_lr: True # enable/disable distributed mode
    min_world_size: 0 # allows to confirm we are indeed in distributed setting
    detect_anomaly: False # if True, PyTorch code will run 6X slower
    seed: '_copy: /common/seed'
    ray:
      enabled: False # initialize ray. Note: ray cannot be used if apex distributed is enabled
      local_mode: False # if True then ray runs in serial mode

  # smoke_test: False
  # only_eval: False
  # resume: True

dataset: {} # default dataset settings comes from __include__ on the top

nas:
  search:
    init_num_models: 20 # initial random models to seed the search 
    num_iters: 3 # number of pareto frontier search iterations 
    num_random_mix: 10 # how many random models to add to the parent mixture
    min_mac: 500000000 # models with mac below will be rejected
    max_mac: 10000000000 # models with mac above will be rejected
    min_layers: 1
    max_layers: 12
    max_downsample_factor: 32 # must be one of {2, 4, 8, 16, 32}
    skip_connections: True
    max_skip_connection_length: 3
    max_scale_delta: 3 # must be one of {1, 2, 3}

    loader:
      batch_size: 16 # TODO: batch size 16 has lr 2e-4. can we increase batch size? what lr?
      dataset:
        _copy: '/dataset'
    trainer:
      gpus: 1
      evaluate_for_steps: 2000
      val_size: 2000
      img_size: 256
      augmentation: 'none'
      lr: 0.0002
      criterion_name: 'ce'